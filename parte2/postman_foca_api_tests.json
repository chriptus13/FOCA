{
	"version": 1,
	"collections": [
		{
			"id": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
			"name": "Foca",
			"description": "",
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "66979d58-9378-45e7-8a3c-a28955aa7794",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7ba9f95d-0aff-4bbb-92d8-fb984a4545b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"variables": [],
			"order": [
				"c57f9a36-4c12-451a-a5c6-1ac5f8499ead",
				"451e1d31-e386-4f03-b00c-710b1c2a8d40",
				"ecbe5a4f-0a48-4b70-95b6-294b3dcc393a",
				"eecad601-2f11-412d-9800-602bd47ccea4",
				"434e878e-de5f-4b5b-9dbf-81c2967a230d",
				"3ac41898-eab5-428c-a2ff-4439baf0126f",
				"2ea52eef-947a-4e9b-b93e-8677a3e3b4f5",
				"76190fda-e660-4e4a-99df-aa12a7c0611e",
				"d5f938e4-1315-4d13-b3d0-56c9d5d79e6c",
				"f477ab94-ea45-4ad5-a1b4-05df16f91f6b",
				"27ac81f2-bf11-4145-aa09-36b230ef4dde",
				"4a648ce0-d227-4e2e-b54f-43c1cf5f6e3e",
				"3924fcf6-7b36-4f00-9b4b-8e117d870971",
				"abc31030-0f00-41e5-af01-65e7757d06db",
				"c18e7170-3b76-43ff-9db8-7937bd8ed91d"
			],
			"folders_order": [],
			"folders": [],
			"requests": [
				{
					"id": "2ea52eef-947a-4e9b-b93e-8677a3e3b4f5",
					"name": "Create Another Group",
					"url": "http://localhost:3000/api/groups",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"description": "",
							"key": "Content-Type",
							"name": "Content-Type",
							"type": "text",
							"value": "application/json"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "21a41ad8-7fd2-46ee-bbbc-12bb48a11dc2",
								"exec": [
									"pm.test(\"Create Another Group\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    const jsonData = pm.response.json()\r",
									"    pm.expect(jsonData._id)\r",
									"    pm.globals.set(\"otherGroupId\", jsonData._id)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Create Another Group\", function () {\r\n    pm.response.to.have.status(201)\r\n    const jsonData = pm.response.json()\r\n    pm.expect(jsonData._id)\r\n    pm.globals.set(\"otherGroupId\", jsonData._id)\r\n})\r\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"rawModeData": "{\n\t\"name\": \"AnotherName\", \n\t\"description\": \"AnotherDescription\"\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "3924fcf6-7b36-4f00-9b4b-8e117d870971",
					"name": "Remove Team From Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}/teams/503",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "c366c262-ffbc-47c0-b57b-73aef63d354d",
								"exec": [
									"pm.test(\"Remove Team From Group\", function () {",
									"    const expectedTeam = {",
									"        \"id\": 503,",
									"        \"name\": \"FC Porto\",",
									"        \"shortName\": \"Porto\",",
									"        \"tla\": \"POR\",",
									"        \"venue\": \"Estádio Do Dragão\"",
									"    }",
									"    pm.response.to.have.status(200)",
									"    const team = pm.response.json()",
									"    pm.expect(compareTeams(team, expectedTeam)).to.be.true",
									"})",
									"",
									"function compareTeams(a, b) {",
									"    if(a.id == b.id && a.venue == b.venue) return true",
									"    return false",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Remove Team From Group\", function () {\n    const expectedTeam = {\n        \"id\": 503,\n        \"name\": \"FC Porto\",\n        \"shortName\": \"Porto\",\n        \"tla\": \"POR\",\n        \"venue\": \"Estádio Do Dragão\"\n    }\n    pm.response.to.have.status(200)\n    const team = pm.response.json()\n    pm.expect(compareTeams(team, expectedTeam)).to.be.true\n})\n\nfunction compareTeams(a, b) {\n    if(a.id == b.id && a.venue == b.venue) return true\n    return false\n}",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "3ac41898-eab5-428c-a2ff-4439baf0126f",
					"name": "Get Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "6b949288-303f-4977-bdae-ccc751270bd8",
								"exec": [
									"pm.test(\"Get Group\", function () {",
									"    pm.response.to.have.status(200)",
									"    const group = pm.response.json()",
									"    pm.expect(group.name).to.eql(\"NewName\")",
									"    pm.expect(group.description).to.eql(\"NewDescription\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Group\", function () {\n    pm.response.to.have.status(200)\n    const group = pm.response.json()\n    pm.expect(group.name).to.eql(\"NewName\")\n    pm.expect(group.description).to.eql(\"NewDescription\")\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "434e878e-de5f-4b5b-9dbf-81c2967a230d",
					"name": "Update Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "c401c5ae-dfd3-47e0-9d6f-bca84b48a0f3",
								"exec": [
									"pm.test(\"Update Group\", function () {",
									"    pm.response.to.have.status(200)",
									"    const jsonData = pm.response.json()",
									"    pm.expect(jsonData._id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Update Group\", function () {\n    pm.response.to.have.status(200)\n    const jsonData = pm.response.json()\n    pm.expect(jsonData._id)\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"rawModeData": "{\n\t\"name\": \"NewName\", \n\t\"description\": \"NewDescription\"\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "451e1d31-e386-4f03-b00c-710b1c2a8d40",
					"name": "Get Teams",
					"url": "http://localhost:3000/api/leagues/2017/teams",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "658f0b04-2751-4355-958d-c2ff64462b0d",
								"exec": [
									"pm.test(\"Get Teams League\", function () {",
									"    const teamsExpected = [",
									"        {",
									"            \"id\": 503,",
									"            \"name\": \"FC Porto\",",
									"            \"shortName\": \"Porto\",",
									"            \"tla\": \"POR\",",
									"            \"venue\": \"Estádio Do Dragão\"",
									"        },",
									"        {",
									"            \"id\": 498,",
									"            \"name\": \"Sporting Clube de Portugal\",",
									"            \"shortName\": \"Sporting CP\",",
									"            \"tla\": \"SPO\",",
									"            \"venue\": \"Estádio José Alvalade\"",
									"        }",
									"    ]",
									"    pm.response.to.have.status(200)",
									"    var teams = pm.response.json()",
									"    teamsExpected.forEach(team => pm.expect(teams.filter(i=>compareTeams(i, team)).length).to.eql(1))",
									"})",
									"",
									"function compareTeams(a, b) {",
									"    if(a.id == b.id && a.venue == b.venue) return true",
									"    return false",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Teams League\", function () {\n    const teamsExpected = [\n        {\n            \"id\": 503,\n            \"name\": \"FC Porto\",\n            \"shortName\": \"Porto\",\n            \"tla\": \"POR\",\n            \"venue\": \"Estádio Do Dragão\"\n        },\n        {\n            \"id\": 498,\n            \"name\": \"Sporting Clube de Portugal\",\n            \"shortName\": \"Sporting CP\",\n            \"tla\": \"SPO\",\n            \"venue\": \"Estádio José Alvalade\"\n        }\n    ]\n    pm.response.to.have.status(200)\n    var teams = pm.response.json()\n    teamsExpected.forEach(team => pm.expect(teams.filter(i=>compareTeams(i, team)).length).to.eql(1))\n})\n\nfunction compareTeams(a, b) {\n    if(a.id == b.id && a.venue == b.venue) return true\n    return false\n}",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "76190fda-e660-4e4a-99df-aa12a7c0611e",
					"name": "Get Groups",
					"url": "http://localhost:3000/api/groups",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "11a63949-41b7-4ae4-9ba7-a4a07dd80416",
								"exec": [
									"pm.test(\"Get Groups\", function () {",
									"    const groupsExpected = [",
									"        {",
									"            \"name\": \"NewName\",",
									"            \"description\": \"NewDescription\",",
									"            \"teams\": []",
									"        },",
									"        {",
									"            \"name\": \"AnotherName\",",
									"            \"description\": \"AnotherDescription\",",
									"            \"teams\": []",
									"        }",
									"    ]",
									"    pm.response.to.have.status(200)",
									"    var groups = pm.response.json()",
									"    groupsExpected.forEach(group => pm.expect(groups.filter(i=>compareGroups(i, group)).length).to.not.eql(0))",
									"})",
									"",
									"function compareGroups(a, b) {",
									"    if(a.name == b.name && a.description == b.description && a.teams.length == b.teams.length) return true",
									"    return false",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Groups\", function () {\n    const groupsExpected = [\n        {\n            \"name\": \"NewName\",\n            \"description\": \"NewDescription\",\n            \"teams\": []\n        },\n        {\n            \"name\": \"AnotherName\",\n            \"description\": \"AnotherDescription\",\n            \"teams\": []\n        }\n    ]\n    pm.response.to.have.status(200)\n    var groups = pm.response.json()\n    groupsExpected.forEach(group => pm.expect(groups.filter(i=>compareGroups(i, group)).length).to.not.eql(0))\n})\n\nfunction compareGroups(a, b) {\n    if(a.name == b.name && a.description == b.description && a.teams.length == b.teams.length) return true\n    return false\n}",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "abc31030-0f00-41e5-af01-65e7757d06db",
					"name": "Delete Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "dee3304b-1afc-4c09-9b59-d681076db203",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200)\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "c18e7170-3b76-43ff-9db8-7937bd8ed91d",
					"name": "Delete Other Group",
					"url": "http://localhost:3000/api/groups/{{otherGroupId}}",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "DELETE",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "eed03eeb-21e5-4092-965a-025432e9a3cb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200)\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "c57f9a36-4c12-451a-a5c6-1ac5f8499ead",
					"name": "Get Leagues",
					"url": "http://localhost:3000/api/leagues",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "8e497b45-14f8-47d5-920a-92a4ae4b8154",
								"exec": [
									"pm.test(\"Get Leagues\", function () {",
									"    const leaguesExpected = [",
									"        {",
									"            \"id\": 2017,",
									"            \"area\": \"Portugal\",",
									"            \"name\": \"Primeira Liga\"",
									"            ",
									"        },",
									"        {",
									"            \"id\": 2014,",
									"            \"area\": \"Spain\",",
									"            \"name\": \"Primera Division\"",
									"        }",
									"    ]",
									"    pm.response.to.have.status(200)",
									"    const leagues = pm.response.json()",
									"    leaguesExpected.forEach(league => pm.expect(leagues.filter(i=>compareLeagues(i, league)).length).to.eql(1))",
									"})",
									"",
									"function compareLeagues(a, b){",
									"    if(a.id == b.id && a.area == b.area && a.name == b.name) return true",
									"    return false",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Leagues\", function () {\n    const leaguesExpected = [\n        {\n            \"id\": 2017,\n            \"area\": \"Portugal\",\n            \"name\": \"Primeira Liga\"\n            \n        },\n        {\n            \"id\": 2014,\n            \"area\": \"Spain\",\n            \"name\": \"Primera Division\"\n        }\n    ]\n    pm.response.to.have.status(200)\n    const leagues = pm.response.json()\n    leaguesExpected.forEach(league => pm.expect(leagues.filter(i=>compareLeagues(i, league)).length).to.eql(1))\n})\n\nfunction compareLeagues(a, b){\n    if(a.id == b.id && a.area == b.area && a.name == b.name) return true\n    return false\n}",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "d5f938e4-1315-4d13-b3d0-56c9d5d79e6c",
					"name": "Add Team To Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}/teams/503",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "PUT",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "eff289eb-9193-43c6-9fa8-f0f136c518d3",
								"exec": [
									"pm.test(\"Add Team To Group\", function () {",
									"    const expectedTeam = {",
									"        \"id\": 503,",
									"        \"name\": \"FC Porto\",",
									"        \"shortName\": \"Porto\",",
									"        \"tla\": \"POR\",",
									"        \"venue\": \"Estádio Do Dragão\"",
									"    }",
									"    pm.response.to.have.status(200)",
									"    const team = pm.response.json()",
									"    pm.expect(compareTeams(team, expectedTeam)).to.be.true",
									"})",
									"",
									"function compareTeams(a, b) {",
									"    if(a.id == b.id && a.venue == b.venue) return true",
									"    return false",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Add Team To Group\", function () {\n    const expectedTeam = {\n        \"id\": 503,\n        \"name\": \"FC Porto\",\n        \"shortName\": \"Porto\",\n        \"tla\": \"POR\",\n        \"venue\": \"Estádio Do Dragão\"\n    }\n    pm.response.to.have.status(200)\n    const team = pm.response.json()\n    pm.expect(compareTeams(team, expectedTeam)).to.be.true\n})\n\nfunction compareTeams(a, b) {\n    if(a.id == b.id && a.venue == b.venue) return true\n    return false\n}",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "ecbe5a4f-0a48-4b70-95b6-294b3dcc393a",
					"name": "Get Teams Of Unexistent League",
					"url": "http://localhost:3000/api/leagues/20000000/teams",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "d7c160a7-1d59-4218-b84a-a0d76d930629",
								"exec": [
									"pm.test(\"Get Teams Of Unexistent League\", function () {",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Teams Of Unexistent League\", function () {\n    pm.response.to.have.status(404)\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				},
				{
					"id": "eecad601-2f11-412d-9800-602bd47ccea4",
					"name": "Create Group",
					"url": "http://localhost:3000/api/groups",
					"description": "",
					"data": [],
					"dataMode": "raw",
					"headerData": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"method": "POST",
					"pathVariableData": [],
					"queryParams": [],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "21a41ad8-7fd2-46ee-bbbc-12bb48a11dc2",
								"exec": [
									"pm.test(\"Create Group\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"    const jsonData = pm.response.json()\r",
									"    pm.globals.set(\"groupId\", jsonData._id)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Create Group\", function () {\r\n    pm.response.to.have.status(201)\r\n    const jsonData = pm.response.json()\r\n    pm.globals.set(\"groupId\", jsonData._id)\r\n})\r\n",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"rawModeData": "{\n\t\"name\": \"TestName\", \n\t\"description\": \"TestDescription\"\n}",
					"headers": "Content-Type: application/json\n",
					"pathVariables": {}
				},
				{
					"id": "f477ab94-ea45-4ad5-a1b4-05df16f91f6b",
					"name": "Get Matches Of Teams In a Group",
					"url": "http://localhost:3000/api/groups/{{groupId}}/matches?from=2018-11-01&to=2018-11-05",
					"description": "",
					"data": null,
					"dataMode": null,
					"headerData": [],
					"method": "GET",
					"pathVariableData": [],
					"queryParams": [
						{
							"key": "from",
							"value": "2018-11-01",
							"equals": true,
							"description": "",
							"enabled": true
						},
						{
							"key": "to",
							"value": "2018-11-05",
							"equals": true,
							"description": "",
							"enabled": true
						}
					],
					"auth": null,
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "7d9ee4ee-b89d-4afe-9b8c-42789db2f110",
								"exec": [
									"pm.test(\"Get Matches Of Teams In a Group\", function () {",
									"    const expectedMatch = {",
									"        'id': 241246,",
									"        'homeTeam': {",
									"            'id': 5575,",
									"            'name': 'CS Marítimo'",
									"        },",
									"        'awayTeam': {",
									"            'id': 503,",
									"            'name': 'FC Porto'",
									"        },       ",
									"        'date': new Date('2018-11-03T18:00:00.000Z')",
									"    }",
									"    pm.response.to.have.status(200)",
									"    const matches = pm.response.json()",
									"    pm.expect(matches.length).to.eql(1)",
									"    pm.expect(matches.pop().id==expectedMatch.id).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"folder": null,
					"preRequestScript": null,
					"tests": "pm.test(\"Get Matches Of Teams In a Group\", function () {\n    const expectedMatch = {\n        'id': 241246,\n        'homeTeam': {\n            'id': 5575,\n            'name': 'CS Marítimo'\n        },\n        'awayTeam': {\n            'id': 503,\n            'name': 'FC Porto'\n        },       \n        'date': new Date('2018-11-03T18:00:00.000Z')\n    }\n    pm.response.to.have.status(200)\n    const matches = pm.response.json()\n    pm.expect(matches.length).to.eql(1)\n    pm.expect(matches.pop().id==expectedMatch.id).to.be.true\n})",
					"currentHelper": null,
					"helperAttributes": null,
					"collectionId": "f89c3c92-e4e4-4b5d-8db3-659d5c32046f",
					"headers": "",
					"pathVariables": {}
				}
			]
		}
	],
	"environments": [
		{
			"id": "0da0b15c-94e8-4c00-9077-0914c2e15897",
			"name": "My Workspace - globals",
			"values": [
				{
					"key": "groupId",
					"value": "f6sfKWcBi2ZdBn2A-SOV",
					"enabled": true
				},
				{
					"key": "otherGroupId",
					"value": "gKsgKWcBi2ZdBn2ADCNJ",
					"enabled": true
				}
			]
		}
	],
	"headerPresets": [],
	"globals": []
}